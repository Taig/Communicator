package com.taig.communicator.method;

import com.taig.communicator.data.Data;
import com.taig.communicator.event.Event;
import com.taig.communicator.request.Response;
import com.taig.communicator.request.Write;
import com.taig.communicator.result.Parser;

import java.io.IOException;
import java.io.InputStream;
import java.net.URL;

import static com.taig.communicator.method.Method.Type;

/**
 * Several applications extending the Hypertext Transfer Protocol (HTTP) require a feature to do partial resource
 * modification. The existing HTTP PUT method only allows a complete replacement of a document. This proposal adds a
 * new HTTP method, PATCH, to modify an existing HTTP resource.
 *
 * @param <R> The {@link com.taig.communicator.request.Response} type (created in {@link #summarize(java.net.URL, int,
 *            String, java.util.Map, Object)}).
 * @param <E> The {@link com.taig.communicator.event.Event} type.
 * @param <T> The resource's type as generated by the supplied {@link com.taig.communicator.result.Parser}.
 * @see com.taig.communicator.method.Method#PATCH(com.taig.communicator.result.Parser, java.net.URL, com.taig.communicator.data.Data, com.taig.communicator.event.Event.Payload)
 * @see <a href="http://tools.ietf.org/html/rfc5789">http://tools.ietf.org/html/rfc5789</a>
 */
public abstract class Patch<R extends Response, E extends Event<R>, T> extends Write<R, E, T>
{
	private Parser<T> parser;

	public Patch( Parser<T> parser, URL url, Data data, E event )
	{
		super( Type.PATCH, url, data, event );
		this.parser = parser;
	}

	@Override
	protected T read( URL url, InputStream input ) throws IOException
	{
		return parser.parse( url, input );
	}
}